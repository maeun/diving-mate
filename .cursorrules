# .cursorrules

## 1. 프로젝트 목적

* 본 웹 서비스는 스쿠버 다이빙 강사와 리조트가 각자의 홍보와 정보 제공을 위한 온라인 플랫폼이다.
* 정보 비대칭을 해소하고, 소비자가 강사와 리조트를 쉽고 편리하게 비교·탐색할 수 있도록 한다.

## 2. UI / UX

1. **디자인 시스템**

   * `shadcn/ui` 컴포넌트 라이브러리를 기본으로 사용하고, 커스텀 컴포넌트도 shadcn 스타일 가이드를 따른다.
   * 모든 아이콘은 **Lucide React**를 사용한다.
2. **스타일링**

   * 스타일은 **Tailwind CSS**로 작성하고, 임베디드 또는 인라인 스타일은 사용하지 않는다.
   * Tailwind 프리셋과 플러그인은 팀에서 합의된 설정만 사용한다.
3. **반응형 & 접근성**

   * **모바일-퍼스트** 접근으로 구현하며, 최소 320 px \~ 최대 1440 px 뷰포트를 우선 대응한다.
   * WCAG 2.1 AA 수준 이상의 접근성(색 대비, 키보드 네비게이션, 스크린리더 레이블)을 준수한다.
4. **성능 & SEO**

   * **Lighthouse** 퍼포먼스 90점 이상을 목표로 코드 스플리팅, 이미지 최적화, 프리로딩을 적용한다.
   * 메타 태그, Open Graph, JSON-LD 등 SEO 메타 정보를 `react-helmet-async`로 관리한다.

## 3. 코드 작성 규칙 (TypeScript + React)

1. **타입 시스템**

   * `any`, `unknown` 사용을 금지한다. 필요 시 **제네릭**과 사용자 지정 타입(Interface, Type Alias)을 명확히 정의한다.
   * API 응답 스키마는 `zod`로 스키마를 정의하고, `z.infer`로 타입을 생성한다.
2. **컴포넌트 설계**

   * **Atomic Design** 레이어(Atoms → Molecules → Organisms → Templates → Pages)를 따르고, 각 레이어별로 디렉터리를 구분한다.
   * 컴포넌트는 최대 200 줄, 하나의 주요 책임만 가지도록 유지한다.
3. **훅(Hooks)**

   * 커스텀 훅 네이밍은 `use` 접두사를 사용하며, 훅 내에서 DOM 조작은 금지한다.
4. **상태 관리**

   * 전역 상태가 필요할 때는 `zustand` 또는 `react-query`를 사용하고, 컨텍스트 남용을 피한다.
5. **코드 스타일**

   * **ESLint**(Airbnb + Tailwind + @typescript-eslint)와 **Prettier**를 CI 단계에서 강제한다.
   * 세미콜론 사용, 탭 크기(2 space), 한 줄 100자 제한을 지킨다.
6. **네이밍 & 구조**

   * 파일/폴더 PascalCase, 훅/변수 camelCase, 상수 SCREAMING\_SNAKE\_CASE를 사용한다.
   * 각 컴포넌트 폴더는 `index.tsx`, `styles.ts`, `types.ts`, `test.tsx`로 구성한다.

## 4. 테스트 & 품질 보증

1. **단위 테스트**: `Jest` + `@testing-library/react`로 작성하며, 로직이 포함된 모든 함수·컴포넌트 커버리지를 80 % 이상 유지한다.
2. **통합 테스트**: 크리티컬 플로우(회원가입, 로그인, 검색, 예약 등)는 `Playwright` E2E 테스트를 작성한다.
3. **Storybook**: 모든 Atom·Molecule 컴포넌트를 Storybook에 문서화하고, 테스트 시각 확인에 활용한다.

## 5. Git & CI/CD

1. **브랜치 전략**

   * `main` → 릴리즈 브랜치, `develop` → 통합 개발 브랜치, 기능별 `feat/*`, 버그픽스 `fix/*` 브랜치를 사용한다.
2. **커밋 메시지**

   * **Conventional Commits** 형식을 따른다. 예: `feat(auth): 소셜 로그인 추가`.
3. **CI 파이프라인**

   * GitHub Actions: `lint → test → build` 순으로 실행하며, 실패 시 병합을 차단한다.
   * 배포는 Firebase Hosting & Functions로 자동화한다.

## 6. 환경 변수 & 보안

* 민감 정보는 `.env.local`(로컬), Firebase 환경변수(프로덕션)에 저장하고, Git에 커밋하지 않는다.
* Firebase 규칙 및 Firestore 보안 규칙을 주기적으로 리뷰한다.

## 7. 코드 리뷰 프로세스

1. **PR 요구 사항**

   * 설명, 스크린샷/GIF, 테스트 결과를 포함한다.
   * 하나의 PR 당 하나의 논리적 변경만 포함한다.
2. **리뷰 체크리스트**

   * 기능 요구사항 충족 여부
   * UI/UX 및 접근성 준수
   * 테스트 추가 여부
   * 성능 및 SEO 영향
   * 코드 스타일 일관성

## 8. 추가 규칙 변경

* 새로운 규칙이 필요하면 전체 팀 동의를 얻어 본 문서에 PR을 제출하고, `CHANGELOG.md`에 기록한다.